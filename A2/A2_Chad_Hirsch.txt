CHAD HIRSCH
CS4430
DUE: 10/08/2019
Assignment #2


1. Find the model number, speed, and hard-disk size for all PC’s whose
price is under $1000.

SELECT model, speed, hdisk 
FROM pc 
WHERE price < 1000;
+-------+-------+-------+
| model | speed | hdisk |
+-------+-------+-------+
| 1002  |  2.10 |   250 |
| 1003  |  1.42 |    80 |
| 1004  |  2.80 |   250 |
| 1005  |  3.20 |   250 |
| 1007  |  2.20 |   200 |
| 1008  |  2.20 |   250 |
| 1009  |  2.00 |   250 |
| 1010  |  2.80 |   300 |
| 1011  |  1.86 |   160 |
| 1012  |  2.80 |   160 |
| 1013  |  3.06 |    80 |
+-------+-------+-------+
11 rows in set (0.00 sec)

2. List the manufacturers of all printers.

SELECT DISTINCT maker 
FROM product 
WHERE type='printer';

+-------+
| maker |
+-------+
| D     |
| E     |
| H     |
+-------+
3 rows in set (0.00 sec)

3.Find the model number, memory size, and screen size for laptops costing more than $1500.

SELECT model, ram, screen 
FROM laptop 
WHERE price > 1500;
+-------+------+--------+
| model | ram  | screen |
+-------+------+--------+
| 2001  | 2048 |  20.10 |
| 2005  | 1024 |  17.00 |
| 2006  | 2048 |  15.40 |
| 2010  | 2048 |  15.40 |
+-------+------+--------+
4 rows in set (0.00 sec)

4. List all color printers.

SELECT model 
FROM printer 
WHERE color = '1';

+-------+
| model |
+-------+
| 3001  |
| 3003  |
| 3004  |
| 3006  |
| 3007  |
+-------+
5 rows in set (0.00 sec)

5.Find the model number and hard-disk size for those PC ’s that have a speed of 3.2 and a price
less than $2000.

SELECT model, hdisk 
FROM pc 
WHERE speed = '3.2' and price < 2000;

+-------+-------+
| model | hdisk |
+-------+-------+
| 1005  |   250 |
| 1006  |   320 |
+-------+-------+
2 rows in set (0.00 sec)

6. Give the manufacturer and speed of laptops with a hard disk of at least 30.

SELECT DISTINCT maker, speed 
FROM product, laptop 
WHERE hdisk >= 30;
+-------+-------+
| maker | speed |
+-------+-------+
| A     |  2.00 |
| A     |  1.73 |
| A     |  1.80 |
| A     |  2.16 |
| A     |  1.83 |
| A     |  1.60 |
| B     |  2.00 |
| B     |  1.73 |
| B     |  1.80 |
| B     |  2.16 |
| B     |  1.83 |
| B     |  1.60 |
| C     |  2.00 |
| C     |  1.73 |
| C     |  1.80 |
| C     |  2.16 |
| C     |  1.83 |
| C     |  1.60 |
| D     |  2.00 |
| D     |  1.73 |
| D     |  1.80 |
| D     |  2.16 |
| D     |  1.83 |
| D     |  1.60 |
| E     |  2.00 |
| E     |  1.73 |
| E     |  1.80 |
| E     |  2.16 |
| E     |  1.83 |
| E     |  1.60 |
| F     |  2.00 |
| F     |  1.73 |
| F     |  1.80 |
| F     |  2.16 |
| F     |  1.83 |
| F     |  1.60 |
| G     |  2.00 |
| G     |  1.73 |
| G     |  1.80 |
| G     |  2.16 |
| G     |  1.83 |
| G     |  1.60 |
| H     |  2.00 |
| H     |  1.73 |
| H     |  1.80 |
| H     |  2.16 |
| H     |  1.83 |
| H     |  1.60 |
+-------+-------+
48 rows in set (0.00 sec)

7. Find the model number and price of all products (of any type) made by manufacturer B.

(SELECT product.model, price FROM product, pc WHERE product.model = pc.model AND maker = 'B') 
UNION (SELECT product.model, price FROM product, laptop WHERE product.model = laptop.model AND maker = 'B') 
UNION (SELECT product.model, price FROM product, printer WHERE product.model = printer.model AND maker = 'B'); 

+-------+---------+
| model | price   |
+-------+---------+
| 1004  |  649.00 |
| 1005  |  630.00 |
| 1006  | 1049.00 |
| 2007  | 1429.00 |
+-------+---------+
4 rows in set (0.00 sec)

8.Find those manufacturers that sell Laptops, but not PC ’s.
SELECT distinct p1.maker 
FROM laptop l 
NATURAL JOIN product p1 
WHERE p1.maker 
NOT IN (SELECT p2.maker FROM pc p 
NATURAL JOIN product p2); 
+-------+
| maker |
+-------+
| F     |
| G     |
+-------+
2 rows in set (0.01 sec)

9. Find those hard disk sizes that occur in two or more PCs.

SELECT hdisk
FROM pc
GROUP BY hdisk
HAVING COUNT(model) >=2; 

+-------+
| hdisk |
+-------+
|    80 |
|   160 |
|   250 |
+-------+
3 rows in set (0.00 sec)



10. Find those pairs of PC models that have both the same speed and RAM. A pair should be listed only once; e.g., list (i,j) but not (j,i).

SELECT p1.model, p2.model
FROM pc p1, pc p2
WHERE p1.model < p2.model AND p1.speed = p2.speed AND p1.ram = p2.ram; 

+-------+-------+
| model | model |
+-------+-------+
| 1004  | 1012  |
+-------+-------+
1 row in set (0.00 sec)


11. Find those manufacturers of at least two different computers (PC’s
or laptops) with speeds of at least 3.0.

SELECT DISTINCT p.maker
FROM product p, product p1
WHERE p.maker = p1.maker
and p.model in 
(
SELECT pc.model
FROM pc
WHERE pc.speed >3.0 
UNION
SELECT lp.model
FROM laptop lp
WHERE lp.speed>3.0);

+-------+
| maker |
+-------+
| B     |
| E     |
+-------+
2 rows in set (0.00 sec)



12. Find the makers of PC’s with a speed of at least 3.0.

SELECT DISTINCT maker
FROM product 
WHERE model in (SELECT model FROM pc WHERE speed>3.0);

+-------+
| maker |
+-------+
| B     |
| E     |
+-------+
2 rows in set (0.01 sec)


13.  Find the printers with the highest price.

SELECT model 
FROM printer 
WHERE price >= ALL(SELECT price FROM printer);

+-------+
| model |
+-------+
| 3003  |
+-------+
1 row in set (0.00 sec)



14. Find the laptops whose speed is slower than that of any PC.

SELECT model
FROM laptop 
WHERE laptop.speed <(SELECT MIN(speed) FROM pc);

Empty set (0.00 sec)



15. Find the model number of the item (PC, laptop, or printer) with the highest price.

select model from
(
select model,price from pc where price = (select max(price) from pc)
union
select model,price from laptop where price = (select max(price) from laptop)
union
select model,price from printer where price = (select max(price) from printer)
) as ab
where price = 
(select max(price) from
(
select model,price from pc where price = (select max(price) from pc)
union
select model,price from laptop where price = (select max(price) from laptop)
union
select model,price from printer where price = (select max(price) from printer)
) as abc) ;

+-------+
| model |
+-------+
| 2001  |
+-------+
1 row in set (0.00 sec)


16. Find the maker of the least expensive color printer.

SELECT DISTINCT maker 
FROM product, printer
WHERE color='1' 
AND printer.model=product.model
AND price <= ALL (SELECT price FROM printer WHERE color='1');

+-------+
| maker |
+-------+
| E     |
+-------+
1 row in set (0.00 sec)


17.Find the maker(s) of the PC(s) with the fastest processor among all those PC’s that have the
smallest amount of RAM.

SELECT DISTINCT maker
FROM product, pc
WHERE product.model=pc.model
AND ram <= ALL (SELECT ram FROM pc)
AND speed >= ALL (SELECT speed FROM pc WHERE ram=(SELECT min(ram) FROM pc));

+-------+
| maker |
+-------+
| B     |
+-------+
1 row in set (0.00 sec


18. Find the average speed of PC’s

SELECT AVG(speed) FROM pc;
+------------+
| AVG(speed) |
+------------+
|   2.484615 |
+------------+
1 row in set (0.00 sec)


19. Find the average speed of laptops costing over $1000. 

SELECT AVG(speed) 
FROM laptop 
WHERE price > 1000; 

+------------+
| AVG(speed) |
+------------+
|   1.998333 |
+------------+
1 row in set (0.00 sec)


20.  Find the average price of PC’s made by manufacturer “A”.

SELECT AVG(price)
FROM pc,product
WHERE pc.model = product.model AND maker='A'; 

+-------------+
| AVG(price)  |
+-------------+
| 1195.666667 |
+-------------+
1 row in set (0.00 sec)


21. Find the average price of PCs and laptops made by manufacturer 'D'.

SELECT AVG(D.price) 
FROM (
SELECT p.price 
FROM product r, pc p
WHERE r.model = p.model AND r.maker = 'D'
UNION ALL
SELECT l.price
FROM product r, laptop l
WHERE r.model = l.model AND r.maker ='D') D; 

+--------------+
| AVG(D.price) |
+--------------+
|   730.000000 |
+--------------+
1 row in set (0.00 sec)


22. Find, for each different speed, the average price of a PC.

SELECT speed, avg(price)
FROM pc
GROUP BY speed; 

+-------+-------------+
| speed | avg(price)  |
+-------+-------------+
|  1.42 |  478.000000 |
|  1.86 |  959.000000 |
|  2.00 |  650.000000 |
|  2.10 |  995.000000 |
|  2.20 |  640.000000 |
|  2.66 | 2114.000000 |
|  2.80 |  689.333333 |
|  3.06 |  529.000000 |
|  3.20 |  839.500000 |
+-------+-------------+
9 rows in set (0.00 sec)


23. Find for each manufacturer, the average screen size of its laptops.

SELECT maker, avg(screen)
FROM product NATURAL JOIN laptop 
GROUP BY maker; 

+-------+-------------+
| maker | avg(screen) |
+-------+-------------+
| A     |   15.233333 |
| B     |   13.300000 |
| E     |   17.500000 |
| F     |   14.750000 |
| G     |   15.400000 |
+-------+-------------+
5 rows in set (0.00 sec)


24. Find the manufactureres that make at least three different models of PC.

SELECT maker
FROM pc NATURAL JOIN product
GROUP BY maker
HAVING count(model) = 3; 

+-------+
| maker |
+-------+
| A     |
| B     |
| D     |
| E     |
+-------+
4 rows in set (0.00 sec)



25. Find for each manufacturer who sell's PC's the maximum price of a PC

SELECT maker, max(price)
FROM product NATURAL JOIN pc
GROUP BY maker; 

+-------+------------+
| maker | max(price) |
+-------+------------+
| A     |    2114.00 |
| B     |    1049.00 |
| C     |     510.00 |
| D     |     770.00 |
| E     |     959.00 |
+-------+------------+
5 rows in set (0.01 sec)

26. Find, for each speed of PC above 2.0, the average price.

SELECT speed, avg(price)
FROM pc
WHERE speed >2.0
GROUP BY speed; 

+-------+-------------+
| speed | avg(price)  |
+-------+-------------+
|  2.10 |  995.000000 |
|  2.20 |  640.000000 |
|  2.66 | 2114.000000 |
|  2.80 |  689.333333 |
|  3.06 |  529.000000 |
|  3.20 |  839.500000 |
+-------+-------------+
6 rows in set (0.00 sec)


27. 

SELECT avg(p.hdisk) 
FROM product pr, pc p
WHERE pr.model = p.model
AND pr.maker IN (
SELECT maker 
FROM product
WHERE type = 'printer'
); 

+--------------+
| avg(p.hdisk) |
+--------------+
|     200.0000 |
+--------------+
1 row in set (0.00 sec)

28. Find the class name and country for all classes with at least 10 guns.

SELECT class, country,guns
FROM classes
WHERE guns >=10;

+-----------+---------+------+
| class     | country | guns |
+-----------+---------+------+
| Tennessee | USA     |   12 |
+-----------+---------+------+
1 row in set (0.00 sec)




29. Find the names of all ships launched prior to 1918, but call the resulting column shipName.


SELECT name AS shipName, launched
FROM ships
WHERE launched<1918;

+-----------------+----------+
| shipName        | launched |
+-----------------+----------+
| Haruna          |     1915 |
| Hiei            |     1914 |
| Kirishima       |     1915 |
| Kongo           |     1913 |
| Ramillies       |     1917 |
| Renown          |     1916 |
| Repulse         |     1916 |
| Resolution      |     1916 |
| Revenge         |     1916 |
| Royal Oak       |     1916 |
| Royal Sovereign |     1916 |
+-----------------+----------+
11 rows in set (0.00 sec)



30. Find the names of ships sunk in battle and the name of the battle in which they were sunk. 

SELECT ship, battle
FROM outcomes
WHERE outcomes.result = 'sunk';

+-------------+----------------+
| ship        | battle         |
+-------------+----------------+
| Arizona     | Pearl Harbor   |
| Bismarck    | Denmark Strait |
| Fuso        | Surigao Strait |
| Hood        | Denmark Strait |
| Kirishima   | Guadalcanal    |
| Scharnhorst | North Cape     |
| Yamashiro   | Surigao Strait |
+-------------+----------------+
7 rows in set (0.00 sec)

31. Find all ship names that have the same name as their class.

SELECT name 
FROM ships
WHERE name = class; 

+----------------+
| name           |
+----------------+
| Iowa           |
| Kongo          |
| North Carolina |
| Renown         |
| Revenge        |
| Tennessee      |
| Yamato         |
+----------------+
7 rows in set (0.00 sec)


32.  Find the names of all ships that begin with the letter “R”.

SELECT name
FROM ships
WHERE name 
LIKE 'R%';

+-----------------+
| name            |
+-----------------+
| Ramillies       |
| Renown          |
| Repulse         |
| Resolution      |
| Revenge         |
| Royal Oak       |
| Royal Sovereign |
+-----------------+
7 rows in set (0.00 sec)


33. Find the names of all ships from the Outcomes table whose name consists of three or more
words (e.g., King George V).

SELECT ship
FROM outcomes
WHERE ship 
LIKE '% % %';

+-----------------+
| ship            |
+-----------------+
| Duke of York    |
| King George V   |
| Prince of Wales |
+-----------------+
3 rows in set (0.00 sec)



34. Find the ships heavier than 35,000 tons.

SELECT DISTINCT ships.name, classes.displacement
FROM classes, ships
WHERE classes.displacement>35000 
AND classes.class=ships.class;


+----------------+--------------+
| name           | displacement |
+----------------+--------------+
| Iowa           |        46000 |
| Missouri       |        46000 |
| New Jersey     |        46000 |
| Wisconsin      |        46000 |
| North Carolina |        37000 |
| Washington     |        37000 |
| Musashi        |        65000 |
| Yamato         |        65000 |
+----------------+--------------+
8 rows in set (0.00 sec)




35. List the name, displacement, and number of guns of the ships engaged in the battle of
Guadalcanal.

SELECT s.name , c.displacement, c.guns 
FROM ships s, outcomes o, classes c 
WHERE s.name = o.ship AND s.class = c.class AND o.battle = 'Guadalcanal';

+------------+--------------+------+
| name       | displacement | guns |
+------------+--------------+------+
| Kirishima  |        32000 |    8 |
| Washington |        37000 |    9 |
+------------+--------------+------+
2 rows in set (0.00 sec)

36. Find those countries that have both battleships and battlecruisers.

SELECT c1.country
FROM classes c1, classes c2
WHERE c1.country = c2.country AND c1.type='bb' AND c2.type ='bc'; 

+-------------+
| country     |
+-------------+
| Japan       |
| Gt. Britain |
+-------------+
2 rows in set (0.00 sec)


37. Find those ships that were damaged in one battle, but later fought in.

CREATE VIEW DamagedShips AS
  SELECT ship AS name, bdate AS damagedate
  FROM battles, outcomes
  WHERE battles.name=outcomes.battle AND outcomes.result='damaged';

SELECT DamagedShips.name
FROM DamagedShips, battles, outcomes
WHERE DamagedShips.name = outcomes.ship AND 
		battles.name = outcomes.battle AND
		battles.bdate > DamagedShips.damagedate; 

Empty set (0.00 sec)

38. Find those battles with at least three ships of the same country.

SELECT o.battle
FROM outcomes o, ships s, classes c
WHERE o.ship = s.name AND s.class = c.class
GROUP BY c.country, o.battle
HAVING COUNT (o.ship) >3; 

Empty set (0.00 sec)

39. Find the countries whose ships had the largest number of guns.

SELECT country
FROM classes
WHERE guns IN (
SELECT MAX(guns)
FROM classes); 

+---------+
| country |
+---------+
| USA     |
+---------+
1 row in set (0.00 sec)


40. 

SELECT DISTINCT c.class
FROM classes c, ships s
WHERE c.class = s.class
AND s.name IN (
SELECT ship
FROM outcomes o
WHERE o.result = 'sunk'); 

+-------+
| class |
+-------+
| Kongo |
+-------+
1 row in set (0.00 sec)


41. Find the names of ships with a 16-inch bore.

SELECT name
FROM classes NATURAL JOIN ships
WHERE bore=16; 

+----------------+
| name           |
+----------------+
| Iowa           |
| Missouri       |
| New Jersey     |
| Wisconsin      |
| North Carolina |
| Washington     |
+----------------+
6 rows in set (0.00 sec)


42. Find the battles in which ships of the Kongo class participated.

SELECT o.battle
FROM outcomes o
WHERE o.ship IN (
SELECT name
FROM ships s
WHERE s.class = 'Kongo'); 

+-------------+
| battle      |
+-------------+
| Guadalcanal |
+-------------+
1 row in set (0.00 sec)


43. Find the names of the ships whose number of guns was the largest for those ships of the same
bore.

SELECT s.name
FROM ships s, classes c
WHERE s.class = c.class
AND guns IN(
SELECT MAX(guns)
FROM ships s1, classes c1
WHERE s1.class = c1.class AND c1.bore = c.bore
); 

+-----------------+
| name            |
+-----------------+
| Iowa            |
| Missouri        |
| New Jersey      |
| Wisconsin       |
| North Carolina  |
| Washington      |
| Ramillies       |
| Resolution      |
| Revenge         |
| Royal Oak       |
| Royal Sovereign |
| California      |
| Tennessee       |
| Musashi         |
| Yamato          |
+-----------------+
15 rows in set (0.00 sec)


44.Find the number of battleship classes. 

SELECT COUNT(class)
FROM classes
WHERE type='bb';

+--------------+
| COUNT(class) |
+--------------+
|            6 |
+--------------+
1 row in set (0.00 sec)



45. Find the average number of guns of battleship (type=’bb’) classes.

SELECT AVG(guns)
FROM classes
WHERE type = 'bb'; 

+-----------+
| AVG(guns) |
+-----------+
|    9.1667 |
+-----------+
1 row in set (0.00 sec)


46. Find the average number of guns of battleships (type=’bb’). Note the difference to the previous
question. In this question, you need to weight a class by the number of ships of that class. 

SELECT AVG(guns)
FROM ships,classes
WHERE ships.class = classes.class AND type = 'bb'; 

+-----------+
| AVG(guns) |
+-----------+
|    9.0667 |
+-----------+
1 row in set (0.00 sec)


47. Find for each class the year in which the first ship of that class was launched.

SELECT class, min(launched)
FROM ships
GROUP BY class; 

+----------------+---------------+
| class          | min(launched) |
+----------------+---------------+
| Iowa           |          1943 |
| Kongo          |          1913 |
| North Carolina |          1941 |
| Renown         |          1916 |
| Revenge        |          1916 |
| Tennessee      |          1920 |
| Yamato         |          1941 |
+----------------+---------------+
7 rows in set (0.00 sec)


48. Find for each class the number of ships that class sunk in battle.

SELECT class, COUNT(ship)
FROM outcomes,ships
WHERE outcomes.ship = ships.name AND result = 'sunk'
GROUP BY class; 

+-------+-------------+
| class | COUNT(ship) |
+-------+-------------+
| Kongo |           1 |
+-------+-------------+
1 row in set (0.00 sec)


49. Find for each class with at least three ships the number of ships of that class sunk in battle.

SELECT M.class, COUNT(result) FROM
(SELECT class, name
FROM ships
WHERE class IN (
SELECT class FROM ships
GROUP BY class
HAVING COUNT(*) >= 3)
) M
LEFT JOIN
(SELECT ship, result
FROM outcomes
WHERE result = 'sunk') S ON M.name = S.ship
GROUP BY M.class;

+---------+---------------+
| class   | COUNT(result) |
+---------+---------------+
| Iowa    |             0 |
| Kongo   |             1 |
| Revenge |             0 |
+---------+---------------+
3 rows in set (0.00 sec)


50. The weight (in pounds) of the shell fired from a naval gun is approximately one half the cube of the bore (in inches). Find the average weight of the shell for each country’s ships.

SELECT country, avg(bore*bore*bore/2) 
FROM classes,ships
WHERE classes.class = ships.class
GROUP BY country; 

+-------------+-----------------------+
| country     | avg(bore*bore*bore/2) |
+-------------+-----------------------+
| Gt. Britain |         1687.50000000 |
| Japan       |         1886.66666667 |
| USA         |         1879.00000000 |
+-------------+-----------------------+
3 rows in set (0.00 sec)



































